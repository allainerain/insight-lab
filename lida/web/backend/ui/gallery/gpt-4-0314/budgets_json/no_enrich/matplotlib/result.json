{"summary": {"name": "budgets.json", "file_name": "budgets.json", "dataset_description": "", "fields": [{"column": "budgetYear", "properties": {"dtype": "number", "std": 8.716037998859905, "min": 1980, "max": 2010, "samples": [1986, 2006, 1985], "num_unique_values": 31, "semantic_type": "", "description": ""}}, {"column": "forecastYear", "properties": {"dtype": "date", "min": "1980-01-01T00:00:00", "max": "2020-01-01T00:00:00", "samples": ["1993-01-01T00:00:00", "1980-01-01T00:00:00", "2018-01-01T00:00:00"], "num_unique_values": 41, "semantic_type": "", "description": ""}}, {"column": "value", "properties": {"dtype": "number", "std": 0.3249124555311103, "min": -1.7810000000000001, "max": 0.519, "samples": [-0.899, 0.308, -1.7810000000000001], "num_unique_values": 207, "semantic_type": "", "description": ""}}], "field_names": ["budgetYear", "forecastYear", "value"]}, "goals": [{"index": 0, "question": "What is the distribution of budgetYear?", "visualization": "histogram of budgetYear", "rationale": "This tells us the frequency of budgetYear values and helps identify any trends or patterns in the data."}, {"index": 1, "question": "What is the distribution of forecastYear?", "visualization": "line chart of forecastYear", "rationale": "This helps us identify any trends or patterns in the forecastYear values over time."}, {"index": 2, "question": "What is the distribution of value?", "visualization": "box plot of value", "rationale": "This helps us identify the range, median, and outliers in the value data."}, {"index": 3, "question": "What is the relationship between budgetYear and value?", "visualization": "scatter plot of budgetYear and value", "rationale": "This helps us identify any correlation or patterns between budgetYear and value."}, {"index": 4, "question": "What is the relationship between forecastYear and value?", "visualization": "line chart of forecastYear and value", "rationale": "This helps us identify any correlation or patterns between forecastYear and value over time."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['budgetYear'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    plt.xlabel('Budget Year')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of budgetYear?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.grid(axis='y', alpha=0.75)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    data['forecastYear'] = data['forecastYear'].dt.year\n\n    plt.plot(data['forecastYear'], data['value'], label='Value')\n    plt.xlabel('Forecast Year')\n    plt.ylabel('Value')\n    plt.title('Distribution of Forecast Year', wrap=True)\n    plt.legend()\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.boxplot(data['value'])\n    ax.set_title('What is the distribution of value?')\n    ax.set_ylabel('Value')\n    ax.axhline(data['value'].median(), color='r', linestyle='--', label=f\"Median: {data['value'].median():.2f}\")\n    ax.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    \n    plt.scatter(data['budgetYear'], data['value'])\n    plt.xlabel('Budget Year')\n    plt.ylabel('Value')\n    plt.title('What is the relationship between budgetYear and value?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    \n    plt.plot(data['forecastYear'], data['value'])\n    plt.xlabel('Forecast Year')\n    plt.ylabel('Value')\n    plt.title('What is the relationship between forecastYear and value?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)"]], "filename": "budgets.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['budgetYear'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    plt.xlabel('Budget Year')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of budgetYear?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.grid(axis='y', alpha=0.75)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    data['forecastYear'] = data['forecastYear'].dt.year\n\n    plt.plot(data['forecastYear'], data['value'], label='Value')\n    plt.xlabel('Forecast Year')\n    plt.ylabel('Value')\n    plt.title('Distribution of Forecast Year', wrap=True)\n    plt.legend()\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.boxplot(data['value'])\n    ax.set_title('What is the distribution of value?')\n    ax.set_ylabel('Value')\n    ax.axhline(data['value'].median(), color='r', linestyle='--', label=f\"Median: {data['value'].median():.2f}\")\n    ax.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    \n    plt.scatter(data['budgetYear'], data['value'])\n    plt.xlabel('Budget Year')\n    plt.ylabel('Value')\n    plt.title('What is the relationship between budgetYear and value?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['forecastYear'] = pd.to_datetime(data['forecastYear'], errors='coerce')\n    data = data[pd.notna(data['forecastYear'])]\n    \n    plt.plot(data['forecastYear'], data['value'])\n    plt.xlabel('Forecast Year')\n    plt.ylabel('Value')\n    plt.title('What is the relationship between forecastYear and value?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}]]}