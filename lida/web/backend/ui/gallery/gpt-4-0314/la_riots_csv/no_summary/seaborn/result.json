{"summary": {"file_name": "la-riots.csv"}, "goals": [{"index": 0, "question": "What is the trend of the number of incidents reported during the LA riots?", "visualization": "Line chart of the number of incidents reported over time", "rationale": "This visualization can help us understand the intensity of the riots and how it evolved over time."}, {"index": 1, "question": "What is the distribution of the type of incidents reported during the LA riots?", "visualization": "Bar chart of the count of each type of incident", "rationale": "This visualization can help us identify the most common types of incidents and their relative frequency."}, {"index": 2, "question": "What is the geographic distribution of the incidents reported during the LA riots?", "visualization": "Heatmap of the incidents reported by location", "rationale": "This visualization can help us identify the hotspots of the riots and how they spread across the city."}, {"index": 3, "question": "What is the relationship between the number of incidents reported and the time of day?", "visualization": "Line chart of the number of incidents reported by hour of the day", "rationale": "This visualization can help us identify the peak hours of the riots and how they correlate with other factors such as curfew or police presence."}, {"index": 4, "question": "What is the demographic distribution of the victims and perpetrators of the incidents reported during the LA riots?", "visualization": "Stacked bar chart of the count of incidents by race and role (victim or perpetrator)", "rationale": "This visualization can help us understand the social dynamics of the riots and how they affected different communities."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['date'] = data['date'].dt.to_period('D')\n    daily_incidents = data.groupby('date').size().reset_index(name='incidents')\n\n    fig, ax = plt.subplots()\n    sns.lineplot(x='date', y='incidents', data=daily_incidents, ax=ax)\n    ax.set_title('What is the trend of the number of incidents reported during the LA riots?', wrap=True)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Number of Incidents')\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    incident_counts = data['incident_type'].value_counts()\n    sns.barplot(x=incident_counts.index, y=incident_counts.values, palette='viridis')\n    plt.xlabel('Incident Type')\n    plt.ylabel('Count')\n    plt.title('What is the distribution of the type of incidents reported during the LA riots?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(incident_counts.index, title='Incident Types', loc='upper right')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.dropna(subset=['latitude', 'longitude'])\n    heatmap_data = data[['latitude', 'longitude']]\n    plt.figure(figsize=(10, 8))\n    sns.set(style=\"white\")\n    sns.kdeplot(heatmap_data['longitude'], heatmap_data['latitude'], cmap=\"coolwarm\", shade=True, shade_lowest=False)\n    plt.title(\"What is the geographic distribution of the incidents reported during the LA riots?\", wrap=True)\n    plt.xlabel(\"Longitude\")\n    plt.ylabel(\"Latitude\")\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['time'] = pd.to_datetime(data['time'], errors='coerce')\n    data = data[pd.notna(data['time'])]\n    data['hour'] = data['time'].dt.hour\n    hourly_incidents = data.groupby('hour').size().reset_index(name='incidents')\n\n    plt.figure(figsize=(12, 6))\n    sns.lineplot(x='hour', y='incidents', data=hourly_incidents)\n    plt.title('What is the relationship between the number of incidents reported and the time of day?', wrap=True)\n    plt.xlabel('Hour of the Day')\n    plt.ylabel('Number of Incidents Reported')\n    plt.xticks(range(0, 24))\n    plt.legend(['Incidents per Hour'])\n\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    data_grouped = data.groupby(['race', 'role']).count().reset_index()\n    chart = sns.barplot(x='race', y='count', hue='role', data=data_grouped, ci=None)\n    plt.title('What is the demographic distribution of the victims and perpetrators of the incidents reported during the LA riots?', wrap=True)\n    plt.xlabel('Race')\n    plt.ylabel('Count of Incidents')\n    plt.legend(title='Role')\n    return plt;\n\nchart = plot(data)"]], "filename": "la-riots.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['date'] = data['date'].dt.to_period('D')\n    daily_incidents = data.groupby('date').size().reset_index(name='incidents')\n\n    fig, ax = plt.subplots()\n    sns.lineplot(x='date', y='incidents', data=daily_incidents, ax=ax)\n    ax.set_title('What is the trend of the number of incidents reported during the LA riots?', wrap=True)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Number of Incidents')\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'date'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'date'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'date'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    incident_counts = data['incident_type'].value_counts()\n    sns.barplot(x=incident_counts.index, y=incident_counts.values, palette='viridis')\n    plt.xlabel('Incident Type')\n    plt.ylabel('Count')\n    plt.title('What is the distribution of the type of incidents reported during the LA riots?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(incident_counts.index, title='Incident Types', loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'incident_type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'incident_type'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'incident_type'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.dropna(subset=['latitude', 'longitude'])\n    heatmap_data = data[['latitude', 'longitude']]\n    plt.figure(figsize=(10, 8))\n    sns.set(style=\"white\")\n    sns.kdeplot(heatmap_data['longitude'], heatmap_data['latitude'], cmap=\"coolwarm\", shade=True, shade_lowest=False)\n    plt.title(\"What is the geographic distribution of the incidents reported during the LA riots?\", wrap=True)\n    plt.xlabel(\"Longitude\")\n    plt.ylabel(\"Latitude\")\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['time'] = pd.to_datetime(data['time'], errors='coerce')\n    data = data[pd.notna(data['time'])]\n    data['hour'] = data['time'].dt.hour\n    hourly_incidents = data.groupby('hour').size().reset_index(name='incidents')\n\n    plt.figure(figsize=(12, 6))\n    sns.lineplot(x='hour', y='incidents', data=hourly_incidents)\n    plt.title('What is the relationship between the number of incidents reported and the time of day?', wrap=True)\n    plt.xlabel('Hour of the Day')\n    plt.ylabel('Number of Incidents Reported')\n    plt.xticks(range(0, 24))\n    plt.legend(['Incidents per Hour'])\n\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'time'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    data_grouped = data.groupby(['race', 'role']).count().reset_index()\n    chart = sns.barplot(x='race', y='count', hue='role', data=data_grouped, ci=None)\n    plt.title('What is the demographic distribution of the victims and perpetrators of the incidents reported during the LA riots?', wrap=True)\n    plt.xlabel('Race')\n    plt.ylabel('Count of Incidents')\n    plt.legend(title='Role')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'role'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'role'\n"}}]]}