{"summary": {"name": "anscombe.json", "file_name": "anscombe.json", "dataset_description": "", "fields": [{"column": "Series", "properties": {"dtype": "category", "samples": [], "num_unique_values": 0, "semantic_type": "", "description": ""}}, {"column": "X", "properties": {"dtype": "number", "std": 3.198836997962679, "min": 4, "max": 19, "samples": [], "num_unique_values": 12, "semantic_type": "", "description": ""}}, {"column": "Y", "properties": {"dtype": "number", "std": 1.9592439863084528, "min": 3.1, "max": 12.74, "samples": [], "num_unique_values": 43, "semantic_type": "", "description": ""}}], "field_names": ["Series", "X", "Y"]}, "goals": [{"index": 0, "question": "What is the relationship between X and Y?", "visualization": "scatter plot of X vs Y", "rationale": "This visualization will help us understand if there is any correlation between X and Y."}, {"index": 1, "question": "What is the distribution of X?", "visualization": "histogram of X", "rationale": "This visualization will help us understand the range and distribution of values in X."}, {"index": 2, "question": "What is the distribution of Y?", "visualization": "histogram of Y", "rationale": "This visualization will help us understand the range and distribution of values in Y."}, {"index": 3, "question": "What is the mean and standard deviation of X?", "visualization": "box plot of X", "rationale": "This visualization will help us understand the central tendency and variability of values in X."}, {"index": 4, "question": "What is the mean and standard deviation of Y?", "visualization": "box plot of Y", "rationale": "This visualization will help us understand the central tendency and variability of values in Y."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='X', y='Y', hue='Series', palette='deep')\n    plt.title('What is the relationship between X and Y?', wrap=True)\n    plt.legend(title='Series')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='X', kde=True)\n    plt.axvline(data['X'].median(), color='red', linestyle='--', label=f\"Median: {data['X'].median():.2f}\")\n    plt.title(\"What is the distribution of X?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    plt.figure()\n    sns.histplot(data=data, x='Y', kde=True, color='blue')\n    plt.axvline(data['Y'].median(), color='red', linestyle='--', label=f\"Median: {data['Y'].median():.2f}\")\n    plt.title(\"What is the distribution of Y?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    ax = sns.boxplot(x=data['X'])\n    mean_x = data['X'].mean()\n    std_x = data['X'].std()\n    plt.axvline(mean_x, color='r', linestyle='--', label=f'Mean: {mean_x:.2f}')\n    plt.axvline(mean_x - std_x, color='g', linestyle='--', label=f'STD Lower: {mean_x - std_x:.2f}')\n    plt.axvline(mean_x + std_x, color='g', linestyle='--', label=f'STD Upper: {mean_x + std_x:.2f}')\n    plt.title('What is the mean and standard deviation of X?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    ax = sns.boxplot(x=data['Y'])\n    mean_y = data['Y'].mean()\n    std_y = data['Y'].std()\n    \n    plt.axhline(mean_y, color='r', linestyle='--', label=f'Mean: {mean_y:.2f}')\n    plt.axhline(mean_y + std_y, color='g', linestyle='--', label=f'+1 Std: {mean_y + std_y:.2f}')\n    plt.axhline(mean_y - std_y, color='g', linestyle='--', label=f'-1 Std: {mean_y - std_y:.2f}')\n    \n    plt.title('What is the mean and standard deviation of Y?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "anscombe.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='X', y='Y', hue='Series', palette='deep')\n    plt.title('What is the relationship between X and Y?', wrap=True)\n    plt.legend(title='Series')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "tile cannot extend outside image", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 541, in print_png\n    mpl.image.imsave(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 1675, in imsave\n    image.save(fname, **pil_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/Image.py\", line 2300, in save\n    save_handler(self, fp, filename)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/PngImagePlugin.py\", line 1374, in _save\n    ImageFile._save(im, _idat(fp, chunk), [(\"zip\", (0, 0) + im.size, 0, rawmode)])\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/ImageFile.py\", line 510, in _save\n    encoder.setimage(im.im, b)\nSystemError: tile cannot extend outside image\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='X', kde=True)\n    plt.axvline(data['X'].median(), color='red', linestyle='--', label=f\"Median: {data['X'].median():.2f}\")\n    plt.title(\"What is the distribution of X?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Singular matrix", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 2385, in axvline\n    return gca().axvline(x=x, ymin=ymin, ymax=ymax, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 805, in axvline\n    self.add_line(l)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2288, in add_line\n    self._update_line_limits(line)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2321, in _update_line_limits\n    trf_to_data = line_trf - self.transData\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1470, in __sub__\n    return self + other.inverted()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1890, in inverted\n    self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)\n  File \"<__array_function__ internals>\", line 180, in inv\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 545, in inv\n    ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 88, in _raise_linalgerror_singular\n    raise LinAlgError(\"Singular matrix\")\nnumpy.linalg.LinAlgError: Singular matrix\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    plt.figure()\n    sns.histplot(data=data, x='Y', kde=True, color='blue')\n    plt.axvline(data['Y'].median(), color='red', linestyle='--', label=f\"Median: {data['Y'].median():.2f}\")\n    plt.title(\"What is the distribution of Y?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    ax = sns.boxplot(x=data['X'])\n    mean_x = data['X'].mean()\n    std_x = data['X'].std()\n    plt.axvline(mean_x, color='r', linestyle='--', label=f'Mean: {mean_x:.2f}')\n    plt.axvline(mean_x - std_x, color='g', linestyle='--', label=f'STD Lower: {mean_x - std_x:.2f}')\n    plt.axvline(mean_x + std_x, color='g', linestyle='--', label=f'STD Upper: {mean_x + std_x:.2f}')\n    plt.title('What is the mean and standard deviation of X?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Singular matrix", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 9, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 2385, in axvline\n    return gca().axvline(x=x, ymin=ymin, ymax=ymax, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 805, in axvline\n    self.add_line(l)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2288, in add_line\n    self._update_line_limits(line)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2321, in _update_line_limits\n    trf_to_data = line_trf - self.transData\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1470, in __sub__\n    return self + other.inverted()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1890, in inverted\n    self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)\n  File \"<__array_function__ internals>\", line 180, in inv\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 545, in inv\n    ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 88, in _raise_linalgerror_singular\n    raise LinAlgError(\"Singular matrix\")\nnumpy.linalg.LinAlgError: Singular matrix\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    ax = sns.boxplot(x=data['Y'])\n    mean_y = data['Y'].mean()\n    std_y = data['Y'].std()\n    \n    plt.axhline(mean_y, color='r', linestyle='--', label=f'Mean: {mean_y:.2f}')\n    plt.axhline(mean_y + std_y, color='g', linestyle='--', label=f'+1 Std: {mean_y + std_y:.2f}')\n    plt.axhline(mean_y - std_y, color='g', linestyle='--', label=f'-1 Std: {mean_y - std_y:.2f}')\n    \n    plt.title('What is the mean and standard deviation of Y?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "tile cannot extend outside image", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 541, in print_png\n    mpl.image.imsave(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 1675, in imsave\n    image.save(fname, **pil_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/Image.py\", line 2300, in save\n    save_handler(self, fp, filename)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/PngImagePlugin.py\", line 1374, in _save\n    ImageFile._save(im, _idat(fp, chunk), [(\"zip\", (0, 0) + im.size, 0, rawmode)])\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/PIL/ImageFile.py\", line 510, in _save\n    encoder.setimage(im.im, b)\nSystemError: tile cannot extend outside image\n"}}]]}