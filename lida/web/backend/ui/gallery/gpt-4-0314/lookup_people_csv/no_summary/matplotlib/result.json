{"summary": {"file_name": "lookup_people.csv"}, "goals": [{"index": 0, "question": "What is the age distribution of the people in the dataset?", "visualization": "Histogram of age", "rationale": "This visualization will help us understand the age range of the people in the dataset and identify any outliers or patterns."}, {"index": 1, "question": "What is the gender distribution of the people in the dataset?", "visualization": "Bar chart of gender", "rationale": "This visualization will help us understand the gender balance of the people in the dataset and identify any gender-based patterns or biases."}, {"index": 2, "question": "What is the distribution of education levels among the people in the dataset?", "visualization": "Pie chart of education level", "rationale": "This visualization will help us understand the educational background of the people in the dataset and identify any trends or patterns based on education level."}, {"index": 3, "question": "What is the distribution of income levels among the people in the dataset?", "visualization": "Box plot of income", "rationale": "This visualization will help us understand the income range of the people in the dataset and identify any outliers or patterns based on income level."}, {"index": 4, "question": "What is the relationship between age and income among the people in the dataset?", "visualization": "Scatter plot of age and income", "rationale": "This visualization will help us understand the correlation between age and income among the people in the dataset and identify any trends or patterns based on age and income level."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['age'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    plt.xlabel('Age')\n    plt.ylabel('Frequency')\n    plt.title('What is the age distribution of the people in the dataset?', wrap=True)\n    plt.axvline(data['age'].median(), color='red', linestyle='dashed', linewidth=1, label=f\"Median: {data['age'].median():.2f}\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    gender_counts = data['gender'].value_counts()\n    ax = gender_counts.plot(kind='bar', color=['blue', 'orange'])\n    plt.title('What is the gender distribution of the people in the dataset?', wrap=True)\n    plt.xlabel('Gender')\n    plt.ylabel('Count')\n    ax.legend(gender_counts.index)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    education_counts = data['education_level'].value_counts()\n    plt.pie(education_counts, labels=education_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    plt.legend(education_counts.index, title=\"Education Levels\", loc=\"best\")\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.boxplot(data['income'])\n    ax.set_title('What is the distribution of income levels among the people in the dataset?')\n    ax.set_ylabel('Income')\n    ax.set_xticklabels(['Income'])\n    plt.show()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['age'], data['income'])\n    plt.xlabel('Age')\n    plt.ylabel('Income')\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "lookup_people.csv", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['age'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    plt.xlabel('Age')\n    plt.ylabel('Frequency')\n    plt.title('What is the age distribution of the people in the dataset?', wrap=True)\n    plt.axvline(data['age'].median(), color='red', linestyle='dashed', linewidth=1, label=f\"Median: {data['age'].median():.2f}\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    gender_counts = data['gender'].value_counts()\n    ax = gender_counts.plot(kind='bar', color=['blue', 'orange'])\n    plt.title('What is the gender distribution of the people in the dataset?', wrap=True)\n    plt.xlabel('Gender')\n    plt.ylabel('Count')\n    ax.legend(gender_counts.index)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'gender'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'gender'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'gender'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    education_counts = data['education_level'].value_counts()\n    plt.pie(education_counts, labels=education_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    plt.legend(education_counts.index, title=\"Education Levels\", loc=\"best\")\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'education_level'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'education_level'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'education_level'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.boxplot(data['income'])\n    ax.set_title('What is the distribution of income levels among the people in the dataset?')\n    ax.set_ylabel('Income')\n    ax.set_xticklabels(['Income'])\n    plt.show()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'income'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'income'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'income'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['age'], data['income'])\n    plt.xlabel('Age')\n    plt.ylabel('Income')\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'income'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'income'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'income'\n"}}]]}