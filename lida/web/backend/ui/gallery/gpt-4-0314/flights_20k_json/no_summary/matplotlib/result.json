{"summary": {"file_name": "flights-20k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This visualization will help us understand the frequency of flight delays and the range of delay times."}, {"index": 1, "question": "What is the relationship between distance and flight time?", "visualization": "Scatter plot of distance vs. air_time", "rationale": "This visualization will help us understand if there is a correlation between distance and flight time, which can help us optimize flight schedules."}, {"index": 2, "question": "What is the most common origin airport?", "visualization": "Bar chart of origin_airport", "rationale": "This visualization will help us identify the most common origin airport, which can help us optimize flight routes and schedules."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Pie chart of cancelled vs. not cancelled flights", "rationale": "This visualization will help us understand the frequency of flight cancellations and the proportion of cancelled vs. not cancelled flights."}, {"index": 4, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This visualization will help us understand the range of flight distances and the frequency of flights at different distances."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    data = data[pd.notna(data['departure_delay'])]\n    \n    plt.hist(data['departure_delay'], bins=30, color='blue', alpha=0.7, label='Departure Delays')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['departure_delay'].median():.2f}\")\n    \n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['distance'], data['air_time'])\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.legend(['Flights'])\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    origin_counts.plot(kind='bar', color='blue', edgecolor='black')\n    \n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    \n    most_common_origin = origin_counts.idxmax()\n    max_count = origin_counts.max()\n    plt.axhline(max_count, color='red', linestyle='--', label=f'Most Common: {most_common_origin} ({max_count:.2f})')\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['blue', 'red']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['distance'], bins=30, color='blue', alpha=0.7)\n    plt.axvline(data['distance'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['distance'].median():.2f}\")\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-20k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    data = data[pd.notna(data['departure_delay'])]\n    \n    plt.hist(data['departure_delay'], bins=30, color='blue', alpha=0.7, label='Departure Delays')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['departure_delay'].median():.2f}\")\n    \n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['distance'], data['air_time'])\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.legend(['Flights'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'air_time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'air_time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'air_time'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    origin_counts.plot(kind='bar', color='blue', edgecolor='black')\n    \n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    \n    most_common_origin = origin_counts.idxmax()\n    max_count = origin_counts.max()\n    plt.axhline(max_count, color='red', linestyle='--', label=f'Most Common: {most_common_origin} ({max_count:.2f})')\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'origin_airport'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'origin_airport'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'origin_airport'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['blue', 'red']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": true, "raster": "iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAACmTklEQVR4nOzdeXwTdf4/8NfMJJkkTdPSpvQuPaClXFJAAamoiCKHxyoo632LCi4eKy6Lii7CytcDAXUB8QR3FUFdpQJeK8Ky/tZrEUE5SukBLT3oRZpz5vdHmCGTpGfSZkrez8eDhzaf+XzmM5/3zCefzPEZRhRFEYQQQgghJGKw4a4AIYQQQgjpWTQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJIQQQgiJMDQAJKqWl5eHp556KmzrX7FiBfLy8npkHXV1dd26nvbW723ChAl49NFHu33d5eXlyMvLw6ZNm+TPHn30URQUFHT7uiV5eXlYsWJFj62vK3bv3o2ZM2di+PDhyMvLw759+1pdtqSkBLfddhtGjhyJvLw8fP7559i0aRPy8vJQXl4uL3fjjTfixhtv7FJ9brzxRkybNq1LebsinPsoIWcqGgCSblFUVIS8vDx89tlnfmmXX3458vLy8J///Mcv7YILLsDMmTO7rV4HDx7EihUrFF+EPeVvf/sbPv/88x5fb0/5+uuvVTuQUnPd2uN0OjF37lzU19fjT3/6E5YuXYqUlJRWl3/00Uexf/9+PPDAA1i6dCmGDBnSg7VVqqqqwooVK9ocsPak3rwftKe8vByLFi3CpEmTcNZZZ2Hy5Mn4+9//Hu5qERXThLsC5Mw0cuRIAMD333+Piy++WP68ubkZBw4cgEajwQ8//IAxY8bIaceOHcOxY8cwZcqUbqvXwYMHsXLlSpxzzjlIS0trd/l77rkHd911V0jWvWrVKkyaNAkTJ04MSXndacuWLWAYplN5vv76a6xfvx5z5szpcJ7U1FTs3r0bGk33dkVt1W337t3gOK5b1x+M0tJSVFRUYNGiRZgxY0aby9psNvz444+YNWsWbrjhhjaXXbt2bSirGdDx48excuVKpKamIj8/P6Rl99Q+2lusXLkSP/30E6644grEx8dj69atWLhwIXiex1VXXRXu6hEVogEg6RaJiYlIS0vD999/r/j8xx9/hCiKuPTSS/3SpL+lwaMaaDSabh+cqJFOp+vW8l0uFwRBgE6nA8/z3bqu9oR7/e2Rbg2Ijo7u8LJms7ndZbs7xt2tt9c/1K6//no8/fTT8o+Zq6++GhMnTsTHH39MA0ASEF0CJt1m5MiR2LdvH2w2m/zZDz/8gAEDBuC8887D//73PwiCoEhjGAYjRozwK+vzzz/HtGnTMGTIEEydOhXbt29XpFdUVGDhwoWYNGkShg0bhtGjR+P+++9XXOrdtGkT/vCHPwAAbrrpJuTl5SEvLw/ffvttq9sQ6N6jnTt34ve//z1GjRqFgoICTJo0Cc8//3ybbZGXlwer1YoPPvhAXq/v/UtNTU149NFHMWrUKIwcORJ/+tOf0NLS4lfWRx99hKuuugrDhg3DOeecgwceeADHjh1rc/2S7777DldffTWGDh2KiRMn4h//+EfA5Xzvr3I6nVi5ciUuueQSDB06FKNHj8bvf/977Ny5E4DnsuP69evlbZX+Aafv81u7di3eeOMNTJw4EUOHDsWhQ4cC3gMoKSsrw+23347hw4ejsLAQK1euhCiKcvq3334bMH6+ZbZVN+kz38uCe/fuxR133IERI0agoKAAN998M3766SfFMtJ9dd9//z2WLFmCMWPGYPjw4bjvvvs6fD/nrl27cN1112H48OEYNWoU7rnnHhw6dEhOf/TRR+UzeX/4wx+Ql5fX6n17K1aswIUXXggAWLp0KfLy8jBhwoRW1x3oHsCKigrMmjULw4cPx9ixY7F48WJ88803rR4nBw8exI033oizzjoL5513HtasWSOnffvtt5g+fToA4E9/+pPc7oFi7S0c+yjgOSM6c+ZMjB49GsOGDcNVV12FLVu2+K1Xui+5vT4J8FwCnz9/PgoLCzFkyBBMmDABTzzxBBwOh7xMY2Mjnn76aZx//vkYMmQILr74YqxevVrRNwLA5s2bcdVVV6GgoAAjRozAZZddhjfffFNOHzp0qOJMtvTj1el0ttneJHJF3qkN0mNGjhyJjz76CP/73/8wevRoAJ5BntSBNTU1Yf/+/Rg4cKCclp2djT59+ijK+f7777Ft2zZcd911iIqKwttvv437778fX331lbzszz//jB9//BFTp05FUlISKioq8Pe//x033XQTNm/eDIPBgLPPPhs33ngj3n77bcyaNQvZ2dkAgJycnA5v04EDB3D33XcjLy8P999/P3Q6HY4cOYIffvihzXxLly7FggULMGzYMFxzzTUAgIyMDMUyc+fORVpaGh588EHs3bsXGzZsQFxcHP74xz/Ky7zyyit48cUXMXnyZEyfPh11dXVYt24drr/+enz44Ydtnvn57bffcPvttyMuLg5z5syBy+XCihUrEB8f3+52r1y5EqtWrcKMGTMwbNgwNDc3Y8+ePfjll18wbtw4XHvttTh+/Dh27tyJpUuXBixj06ZNsNvtuOaaa6DT6RATE+P3JSdxu9244447cNZZZ+GPf/wjvvnmG6xYsQJut1sexHdUR+rm7cCBA7j++usRFRWFO+64AxqNBu+++y5uvPFGrFu3DmeddZZi+UWLFsFsNmP27NmoqKjAm2++iaeeegrLli1rcz3//ve/ceeddyItLQ2zZ8+GzWbDunXr8Pvf/x6bNm1CWloarr32WiQmJuJvf/sbbrzxRgwdOhQWiyVgeRdffDGio6OxZMkSTJs2DePHj0dUVFSH28lqteLmm29GdXU1brrpJlgsFnzyySet/kBqaGjAHXfcgYsvvhiTJ0/G1q1b8eyzzyI3Nxfnn38+cnJycP/992P58uW49tpr5TP7gX7gScK5j7711luYMGECLrvsMjidTmzevBl/+MMfsGrVKlxwwQWKZTvSJ1VVVWH69OloamrCNddcg+zsbFRVVWHr1q2w2WzQ6XRoaWnBDTfcgKqqKsycORPJycn48ccf8fzzz6O6uhp//vOfAXh+dD744IMYO3YsHn74YQBAcXExfvjhB9x8880B2+Ptt99GWVkZ7rvvvnbbjkQokZBucuDAATE3N1d86aWXRFEURafTKQ4fPlz84IMPRFEUxXPP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XGdkZHT5nsYHH3wQO3fuxI033ohrrrkGOTk5qK6uxpYtW/DOO+/AbDbj9ttvx5dffolZs2bhd7/7HQYPHoyWlhbs378fW7duxRdffIG4uDgsWLAADQ0NGDNmDBITE3H06FGsW7cO+fn5ftNYPf/88/jggw+6XG8SOWgASLrdyJEj8d1332Hw4MF+s/ePGDECr732GqKiojr1QIGvP//5z2BZFh9//DHsdjtGjBghd+jeEhIS8OSTT2LVqlX485//DLfbjbfeeqvDA8AJEyagoqICGzduxIkTJ9CnTx+cc845mDNnTrtvanj00Ufx+OOPY9myZbDZbPjd737XqQEgANx1113IzMzEG2+8gZdeegmA52b8cePGtTnpL+B5UnHt2rVYsmQJli9fjqSkJMyZMwfV1dXtflnceOON+PLLL7Fz5044HA6kpKRg7ty5igHnJZdcghtvvBGbN2/GP//5T4ii2OUBIMdxePXVV7Fw4UL83//9H6KiojB79my/Oc0WLFgAl8uFf/zjH9DpdLj00kvxyCOPYNq0aYrlOlO3AQMGYP369XjuueewatUqiKKIYcOG4f/+7/86Ha+2nHvuuXj11VexfPlyLF++HBqNBmeffTb++Mc/tjpA6k5RUVF48803sWjRIrz11lswGo248sorUVBQgDlz5nTpjSlarRZ//etf8fzzz2PhwoVwuVxYsmRJq9sXrn107NixePrpp7FmzRosXrwYaWlpePjhh1FRUdHlgVRiYiLee+89vPjii/j444/R3NyMxMREjB8/Xr4f1mAw4O2338aqVauwZcsWfPjhhzCZTMjMzFT0KZdffjnee+89vPPOO2hsbERCQgImT56MOXPm0IMepMsYkW4WIIQQ0oo33ngDS5Yswfbt25GYmBju6hBCQoR+OhBCCAEAxWsbAc89gO+++y4yMzNp8EfIGYYuARNCCAEAzJ49GykpKRg4cCCam5vxz3/+E8XFxXj22WfDXTVCSIjRJWBCCCEAPJd733//fVRUVMDtdqN///644447MGXKlHBXjRASYjQAJIQQQgiJMHQPICGEEEJIhKEBICGEEEJIhKEBICGEEEJIhKEBICGEEEJIhKEBYJCqqqrgdDrDXY3e4/nngYULPf/tZk6nk+KjYhQfdaP4qBvFhwSL5gEMkvQScdJBJpPyv92IYRiKj4pRfNSN4qNu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", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['distance'], bins=30, color='blue', alpha=0.7)\n    plt.axvline(data['distance'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['distance'].median():.2f}\")\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}]]}