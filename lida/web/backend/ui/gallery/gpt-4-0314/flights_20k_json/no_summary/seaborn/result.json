{"summary": {"file_name": "flights-20k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This visualization will help us understand the frequency of flight delays and the range of delay times."}, {"index": 1, "question": "What is the relationship between distance and flight time?", "visualization": "Scatter plot of distance vs. air_time", "rationale": "This visualization will help us understand if there is a correlation between distance and flight time, which can help us optimize flight schedules."}, {"index": 2, "question": "What is the most common origin airport?", "visualization": "Bar chart of origin_airport", "rationale": "This visualization will help us identify the most common origin airport, which can help us optimize flight routes and schedules."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Pie chart of cancelled vs. not cancelled flights", "rationale": "This visualization will help us understand the frequency of flight cancellations and the proportion of cancelled vs. not cancelled flights."}, {"index": 4, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This visualization will help us understand the range of flight distances and the frequency of flights at different distances."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='departure_delay', bins=50, kde=True, color='blue')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='--', label=f\"Median: {data['departure_delay'].median():.2f}\")\n    plt.title(\"What is the distribution of flight delays?\", wrap=True)\n    plt.xlabel(\"Departure Delay (minutes)\")\n    plt.ylabel(\"Frequency\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='air_time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    chart = sns.barplot(x=origin_counts.index, y=origin_counts.values)\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.legend(title='Origin Airports', loc='upper right', labels=origin_counts.index)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['#66b3ff', '#ff9999']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%.2f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='distance', bins=30, color='blue', kde=True)\n    plt.axvline(data['distance'].median(), color='red', linestyle='--', label=f\"Median: {data['distance'].median():.2f}\")\n    plt.title(\"What is the distribution of flight distances?\", wrap=True)\n    plt.xlabel(\"Distance\")\n    plt.ylabel(\"Frequency\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-20k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='departure_delay', bins=50, kde=True, color='blue')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='--', label=f\"Median: {data['departure_delay'].median():.2f}\")\n    plt.title(\"What is the distribution of flight delays?\", wrap=True)\n    plt.xlabel(\"Departure Delay (minutes)\")\n    plt.ylabel(\"Frequency\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `departure_delay` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `departure_delay` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='air_time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `air_time` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `air_time` for parameter `y`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    chart = sns.barplot(x=origin_counts.index, y=origin_counts.values)\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.legend(title='Origin Airports', loc='upper right', labels=origin_counts.index)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'origin_airport'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'origin_airport'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'origin_airport'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['#66b3ff', '#ff9999']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%.2f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='distance', bins=30, color='blue', kde=True)\n    plt.axvline(data['distance'].median(), color='red', linestyle='--', label=f\"Median: {data['distance'].median():.2f}\")\n    plt.title(\"What is the distribution of flight distances?\", wrap=True)\n    plt.xlabel(\"Distance\")\n    plt.ylabel(\"Frequency\")\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}]]}