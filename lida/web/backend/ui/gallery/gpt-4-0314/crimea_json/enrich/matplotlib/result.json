{"summary": {"name": "Crimean War Casualties", "file_name": "crimea.json", "dataset_description": "This dataset contains information about casualties during the Crimean War, including the date, number of wounds, other casualties, and disease-related casualties.", "fields": [{"column": "date", "properties": {"dtype": "date", "min": "1854-04-01", "max": "1856-03-01", "samples": ["1854-11-01", "1854-06-01", "1854-10-01"], "num_unique_values": 24, "semantic_type": "date", "description": "The date when the casualties were recorded."}}, {"column": "wounds", "properties": {"dtype": "number", "std": 141.91942498617234, "min": 0, "max": 480, "samples": [305, 230, 0], "num_unique_values": 17, "semantic_type": "number", "description": "The number of casualties caused by wounds."}}, {"column": "other", "properties": {"dtype": "number", "std": 122.01638491778797, "min": 40, "max": 520, "samples": [155, 310, 290], "num_unique_values": 18, "semantic_type": "number", "description": "The number of casualties caused by other factors."}}, {"column": "disease", "properties": {"dtype": "number", "std": 386.7075815434556, "min": 90, "max": 1440, "samples": [520, 290, 490], "num_unique_values": 24, "semantic_type": "number", "description": "The number of casualties caused by diseases."}}], "field_names": ["date", "wounds", "other", "disease"]}, "goals": [{"index": 0, "question": "What is the trend of casualties over time?", "visualization": "line chart of casualties over time using the 'date' field", "rationale": "This visualization can help identify any patterns or spikes in casualties during specific time periods."}, {"index": 1, "question": "What is the distribution of casualties caused by wounds?", "visualization": "histogram of casualties caused by wounds using the 'wounds' field", "rationale": "This visualization can help identify the range and frequency of casualties caused by wounds."}, {"index": 2, "question": "What is the distribution of casualties caused by other factors?", "visualization": "histogram of casualties caused by other factors using the 'other' field", "rationale": "This visualization can help identify the range and frequency of casualties caused by other factors."}, {"index": 3, "question": "What is the distribution of casualties caused by diseases?", "visualization": "histogram of casualties caused by diseases using the 'disease' field", "rationale": "This visualization can help identify the range and frequency of casualties caused by diseases."}, {"index": 4, "question": "What is the correlation between casualties caused by wounds and other factors?", "visualization": "scatter plot of casualties caused by wounds and other factors using the 'wounds' and 'other' fields", "rationale": "This visualization can help identify any relationship or correlation between casualties caused by wounds and other factors."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.plot(data['date'], data['wounds'], label='Wounds', color='blue')\n    plt.plot(data['date'], data['other'], label='Other', color='green')\n    plt.plot(data['date'], data['disease'], label='Disease', color='red')\n    \n    plt.title('What is the trend of casualties over time?', wrap=True)\n    plt.xlabel('Date')\n    plt.ylabel('Number of Casualties')\n    plt.legend()\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['wounds'], bins=10, color='blue', alpha=0.7, label='Wounds')\n    plt.axvline(data['wounds'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['wounds'].median():.2f}\")\n    plt.xlabel('Number of Casualties Caused by Wounds')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by wounds?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.hist(data['other'], bins=10, color='blue', alpha=0.7, label='Other Casualties')\n    plt.xlabel('Number of Casualties')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by other factors?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.hist(data['disease'], bins=10, color='blue', alpha=0.7, label='Disease Casualties')\n    plt.axvline(data['disease'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['disease'].median():.2f}\")\n    plt.xlabel('Disease Casualties')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by diseases?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['wounds'], data['other'])\n    plt.xlabel('Wounds')\n    plt.ylabel('Other Factors')\n    plt.title('Correlation between casualties caused by wounds and other factors')\n    plt.legend(['Casualties'])\n    return plt;\n\nchart = plot(data)"]], "filename": "crimea.json", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.plot(data['date'], data['wounds'], label='Wounds', color='blue')\n    plt.plot(data['date'], data['other'], label='Other', color='green')\n    plt.plot(data['date'], data['disease'], label='Disease', color='red')\n    \n    plt.title('What is the trend of casualties over time?', wrap=True)\n    plt.xlabel('Date')\n    plt.ylabel('Number of Casualties')\n    plt.legend()\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['wounds'], bins=10, color='blue', alpha=0.7, label='Wounds')\n    plt.axvline(data['wounds'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['wounds'].median():.2f}\")\n    plt.xlabel('Number of Casualties Caused by Wounds')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by wounds?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.hist(data['other'], bins=10, color='blue', alpha=0.7, label='Other Casualties')\n    plt.xlabel('Number of Casualties')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by other factors?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.hist(data['disease'], bins=10, color='blue', alpha=0.7, label='Disease Casualties')\n    plt.axvline(data['disease'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['disease'].median():.2f}\")\n    plt.xlabel('Disease Casualties')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of casualties caused by diseases?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['wounds'], data['other'])\n    plt.xlabel('Wounds')\n    plt.ylabel('Other Factors')\n    plt.title('Correlation between casualties caused by wounds and other factors')\n    plt.legend(['Casualties'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}]]}