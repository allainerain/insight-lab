{"summary": {"file_name": "flights-200k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This visualization will help us understand the frequency of flight delays and the range of delay times."}, {"index": 1, "question": "What is the relationship between distance and flight time?", "visualization": "Scatter plot of distance vs. air_time", "rationale": "This visualization will help us understand if there is a correlation between distance and flight time, which can help us optimize flight schedules."}, {"index": 2, "question": "What is the most common origin airport?", "visualization": "Bar chart of origin_airport", "rationale": "This visualization will help us identify the most common origin airport, which can help us optimize flight routes and schedules."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Pie chart of cancelled vs. not cancelled flights", "rationale": "This visualization will help us understand the frequency of flight cancellations and the proportion of cancelled vs. not cancelled flights."}, {"index": 4, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This visualization will help us understand the range of flight distances and the frequency of flights at different distances."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    data = data[pd.notna(data['departure_delay'])]\n    \n    plt.hist(data['departure_delay'], bins=50, color='blue', alpha=0.7, label='Departure Delays')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['departure_delay'].median():.2f}\")\n    \n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['distance'], data['air_time'])\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.legend(['Flights'])\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    origin_counts.plot(kind='bar', color='blue', legend=True)\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    plt.legend(['Origin Airport'])\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['blue', 'red']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['distance'], bins=30, color='blue', alpha=0.7, label='Flight Distances')\n    plt.axvline(data['distance'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['distance'].median():.2f}\")\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-200k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    data = data[pd.notna(data['departure_delay'])]\n    \n    plt.hist(data['departure_delay'], bins=50, color='blue', alpha=0.7, label='Departure Delays')\n    plt.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['departure_delay'].median():.2f}\")\n    \n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['distance'], data['air_time'])\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.legend(['Flights'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'air_time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'air_time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'air_time'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    origin_counts.plot(kind='bar', color='blue', legend=True)\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    plt.legend(['Origin Airport'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'origin_airport'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'origin_airport'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'origin_airport'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['blue', 'red']\n    \n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['distance'], bins=30, color='blue', alpha=0.7, label='Flight Distances')\n    plt.axvline(data['distance'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['distance'].median():.2f}\")\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}]]}