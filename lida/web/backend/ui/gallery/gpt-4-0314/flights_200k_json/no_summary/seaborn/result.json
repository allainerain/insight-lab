{"summary": {"file_name": "flights-200k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This visualization will help us understand the frequency of flight delays and the range of delay times."}, {"index": 1, "question": "What is the relationship between distance and flight time?", "visualization": "Scatter plot of distance vs. air_time", "rationale": "This visualization will help us understand if there is a correlation between distance and flight time, which can help us optimize flight schedules."}, {"index": 2, "question": "What is the most common origin airport?", "visualization": "Bar chart of origin_airport", "rationale": "This visualization will help us identify the most common origin airport, which can help us optimize flight routes and schedules."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Pie chart of cancelled vs. not cancelled flights", "rationale": "This visualization will help us understand the frequency of flight cancellations and the proportion of cancelled vs. not cancelled flights."}, {"index": 4, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This visualization will help us understand the range of flight distances and the frequency of flights at different distances."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='departure_delay', bins=50, kde=True, color='blue')\n    median_delay = data['departure_delay'].median()\n    plt.axvline(median_delay, color='red', linestyle='--', label=f'Median Delay: {median_delay:.2f}')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["```python\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='air_time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    return plt;\n\nchart = plot(data)\n```\n"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    sns.barplot(x=origin_counts.index, y=origin_counts.values, palette='viridis')\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(title='Origin Airports', labels=origin_counts.index, loc='upper right')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['#66b3ff', '#ff9999']\n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%.2f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='distance', bins=30, kde=True, color='blue')\n    median_distance = data['distance'].median()\n    plt.axvline(median_distance, color='red', linestyle='--', label=f'Median: {median_distance:.2f}')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-200k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='departure_delay', bins=50, kde=True, color='blue')\n    median_delay = data['departure_delay'].median()\n    plt.axvline(median_delay, color='red', linestyle='--', label=f'Median Delay: {median_delay:.2f}')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `departure_delay` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `departure_delay` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='air_time')\n    plt.title('What is the relationship between distance and flight time?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Flight Time')\n    return plt;\n\nchart = plot(data)\n", "library": "seaborn", "error": {"message": "Could not interpret value `air_time` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `air_time` for parameter `y`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    origin_counts = data['origin_airport'].value_counts()\n    sns.barplot(x=origin_counts.index, y=origin_counts.values, palette='viridis')\n    plt.xlabel('Origin Airport')\n    plt.ylabel('Number of Flights')\n    plt.title('What is the most common origin airport?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(title='Origin Airports', labels=origin_counts.index, loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'origin_airport'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'origin_airport'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'origin_airport'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    cancelled_counts = data['cancelled'].value_counts()\n    labels = ['Not Cancelled', 'Cancelled']\n    colors = ['#66b3ff', '#ff9999']\n    plt.pie(cancelled_counts, labels=labels, colors=colors, autopct='%.2f%%')\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.legend(labels, loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": true, "raster": "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AGzfvp2LL74YgNtvv52srCyysrLYsGEDADt27GDRokWcddZZnHLKKUycOJH77ruP+vp6r8+47bbbyM3NpbS0lBtvvJHc3FzGjh3LAw88gNPp9NrW5XLxwgsvcP7555OTk8PYsWOZO3cuX375pdd2b775JrNmzWLEiBGMHj2aJUuWcPDgwcAdQCGE+In82yyE6FVmzpzJqlWr+Oijj7j00kt91v/www/Mnz+frKwsFi1ahNlspqioiM8++wyAwYMHs2jRIlavXs3s2bM5/fTTATjttNMA2LRpE/X19cyZM4e4uDi++OILXn75ZUpKSli9erXXZzmdTubOncuIESP43e9+x7Zt23juuedIS0vjl7/8pWe73//+92zYsIG8vDwuvvhinE4nO3bs4PPPP/e0cv7pT3/i8ccfZ/r06Vx88cUcPXqUl19+mcsvv5z/+7//w2azdcvxFEKEJwkAhRC9Sr9+/YiJiWHfvn1+12/ZsgW73c66detISEjwWZ+UlEReXh6rV69m5MiRzJw502v9rbfeSkREhOf17NmzGThwIKtWreLAgQP079/fs66hoYHp06fz61//GoA5c+Zw0UUX8cYbb3gCwP/85z9s2LCBK6+8kuXLl3vS/upXv8LtdgNQXFzMmjVrWLx4MQsWLPBsM3XqVC666CJeeeUVr/eFEKKr5BawEKLXsVqt1NTU+F2ntZS9++67uFyuDufdNPirra3l6NGj5Obm4na7+frrr322nzNnjtfr008/nf3793tev/322+h0OhYuXOiTVqfTAfDOO+/gcrmYPn06R48e9SxJSUkMHDiQ7du3d3g/hBCiNdICKITodWpra0lMTPS77txzz+X1119n+fLlPPLII4wbN44pU6bw85//HL2+7f95Dxw4wOrVq3nvvfeoqKjwWlddXe312mKx+LQyxsbGeqXbu3cvffr0IS4ursXP3LNnD263m6lTp/pdL4NchBCBJlcVIUSvUlJSQlVVFenp6X7XR0RE8Ne//pXt27fzwQcf8OGHH7Jx40b+9re/8dxzz2EwGFrM2+l0cu2111JRUcF1111HZmYmVquV0tJSbrvtNp8Wxdby6giXy4VOp2PdunV+87RarQH5HCGE0EgAKIToVd58800AJkyY0OI2er2ecePGMW7cOG6//XaeeuopHn30UbZv384ZZ5zhufXa3Pfff8+ePXt44IEHuPDCCz3vb9mypdPlTU9P56OPPqK8vLzFVsD09HTcbjcDBgxg0KBBnf4sIYRoL+kDKIToNbZt28aTTz7JgAEDuOCCC/xuU15e7vOeNtlzY2MjAJGRkQBUVlZ6bafdItYGZ2i/v/jii50u89SpU3G73axdu9ZnnfY5U6dOxWAwsHbtWq/P1rY5duxYpz9fCCH8kRZAIURIys/Pp7CwEKfTSVlZGdu3b2fLli3079+fP/3pT1gsFr/pnnjiCXbs2MHEiRNJTU3lyJEjvPLKK/Tr188z5Ut6ejo2m41XX32VqKgorFYrI0aMIDMzk/T0dB544AFKS0uJjo7mX//6l0+g2BFjx45l5syZvPTSSxQVFXHmmWficrn49NNPGTNmDFdccQXp6eksXryYRx55hOLiYs455xyioqLYv38///73v7n00kuZO3dup8sghBDNSQAohAhJ2px7JpOJuLg4TjrpJJYtW9bms4DPPvtsiouLWb9+PceOHSM+Pp7Ro0dz0003ERMT48nz/vvvZ9WqVdx55504HA5WrlzJrFmzeOqpp7j33nt5+umnsVgsTJkyhcsvv9xnupiOWLlyJVlZWbzxxhs8+OCDxMTEcMopp5Cbm+vZ5vrrrycjI4Pnn3+eJ554AlBT3owfP56zzz67058thBD+6NzN7zcIIYQQQogTmvQBFEIIIYQIMxIACiGEEEKEGQkAhRBCCCHCjASAQgghhBBh5v8DKIh1dtWAHhwAAAAASUVORK5CYII=", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='distance', bins=30, kde=True, color='blue')\n    median_distance = data['distance'].median()\n    plt.axvline(median_distance, color='red', linestyle='--', label=f'Median: {median_distance:.2f}')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}]]}