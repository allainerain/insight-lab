{"summary": {"file_name": "airports.csv"}, "goals": [{"index": 0, "question": "What is the distribution of airports by country?", "visualization": "Bar chart of number of airports by country", "rationale": "This visualization will help us understand which countries have the most and least number of airports. This information can be useful for airlines and airport management companies to identify potential markets and investment opportunities."}, {"index": 1, "question": "What is the distribution of airports by type?", "visualization": "Pie chart of number of airports by type", "rationale": "This visualization will help us understand the proportion of different types of airports such as small, medium, and large airports. This information can be useful for airlines and airport management companies to identify the types of airports they need to focus on for their operations."}, {"index": 2, "question": "What is the busiest airport in terms of passenger traffic?", "visualization": "Bar chart of top 10 airports by passenger traffic", "rationale": "This visualization will help us identify the busiest airports in terms of passenger traffic. This information can be useful for airlines to identify the most popular airports and plan their routes accordingly."}, {"index": 3, "question": "What is the distribution of airports by region?", "visualization": "Map of airports by region", "rationale": "This visualization will help us understand the distribution of airports across different regions. This information can be useful for airlines and airport management companies to identify potential markets and investment opportunities."}, {"index": 4, "question": "What is the trend of airport traffic over time?", "visualization": "Line chart of airport traffic over time", "rationale": "This visualization will help us understand the trend of airport traffic over time. This information can be useful for airlines and airport management companies to identify seasonal patterns and plan their operations accordingly."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    # Group data by country and count the number of airports\n    country_counts = data['country'].value_counts()\n\n    # Create a bar chart of the number of airports by country\n    plt.figure(figsize=(15, 6))\n    plt.bar(country_counts.index, country_counts.values)\n    plt.xlabel('Country')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=90)\n    plt.title('What is the distribution of airports by country?', wrap=True)\n\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    airport_types = data['type'].value_counts()\n    plt.pie(airport_types, labels=airport_types.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airports by type?', wrap=True)\n    plt.legend(airport_types.index, title=\"Airport Types\", loc=\"best\")\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    # Sort the data by passenger traffic and select the top 10 airports\n    top_airports = data.sort_values(by='passenger_traffic', ascending=False).head(10)\n\n    # Create a bar chart of the top 10 airports by passenger traffic\n    ax = top_airports.plot.bar(x='airport_name', y='passenger_traffic', legend=False, color='b')\n    \n    # Set the title and labels\n    plt.title('What is the busiest airport in terms of passenger traffic?', wrap=True)\n    plt.xlabel('Airport Name')\n    plt.ylabel('Passenger Traffic')\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    \n    # Add a horizontal line for the busiest airport\n    busiest_airport_traffic = top_airports['passenger_traffic'].max()\n    plt.axhline(busiest_airport_traffic, color='r', linestyle='--', label=f'Busiest Airport: {busiest_airport_traffic:.2f}')\n    \n    # Add the legend\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    # Read the world shapefile\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n    # Convert the data to a GeoDataFrame\n    gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.longitude, data.latitude))\n\n    # Plot the world map\n    fig, ax = plt.subplots(figsize=(15, 10))\n    world.boundary.plot(ax=ax, linewidth=1)\n\n    # Plot the airports by region\n    gdf.plot(ax=ax, column='region', legend=True, markersize=5, cmap='viridis', legend_kwds={'loc': 'lower left'})\n\n    # Set the title\n    plt.title('What is the distribution of airports by region?', wrap=True)\n\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    data = data.groupby('date')['traffic'].sum().reset_index()\n    \n    plt.plot(data['date'], data['traffic'])\n    plt.xlabel('Date')\n    plt.ylabel('Airport Traffic')\n    plt.title('What is the trend of airport traffic over time?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)"]], "filename": "airports.csv", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    # Group data by country and count the number of airports\n    country_counts = data['country'].value_counts()\n\n    # Create a bar chart of the number of airports by country\n    plt.figure(figsize=(15, 6))\n    plt.bar(country_counts.index, country_counts.values)\n    plt.xlabel('Country')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=90)\n    plt.title('What is the distribution of airports by country?', wrap=True)\n\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    airport_types = data['type'].value_counts()\n    plt.pie(airport_types, labels=airport_types.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airports by type?', wrap=True)\n    plt.legend(airport_types.index, title=\"Airport Types\", loc=\"best\")\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'type'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'type'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    # Sort the data by passenger traffic and select the top 10 airports\n    top_airports = data.sort_values(by='passenger_traffic', ascending=False).head(10)\n\n    # Create a bar chart of the top 10 airports by passenger traffic\n    ax = top_airports.plot.bar(x='airport_name', y='passenger_traffic', legend=False, color='b')\n    \n    # Set the title and labels\n    plt.title('What is the busiest airport in terms of passenger traffic?', wrap=True)\n    plt.xlabel('Airport Name')\n    plt.ylabel('Passenger Traffic')\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    \n    # Add a horizontal line for the busiest airport\n    busiest_airport_traffic = top_airports['passenger_traffic'].max()\n    plt.axhline(busiest_airport_traffic, color='r', linestyle='--', label=f'Busiest Airport: {busiest_airport_traffic:.2f}')\n    \n    # Add the legend\n    plt.legend()\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'passenger_traffic'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 6319, in sort_values\n    k = self._get_label_or_level_values(by, axis=axis)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/generic.py\", line 1840, in _get_label_or_level_values\n    raise KeyError(key)\nKeyError: 'passenger_traffic'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    # Read the world shapefile\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n    # Convert the data to a GeoDataFrame\n    gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.longitude, data.latitude))\n\n    # Plot the world map\n    fig, ax = plt.subplots(figsize=(15, 10))\n    world.boundary.plot(ax=ax, linewidth=1)\n\n    # Plot the airports by region\n    gdf.plot(ax=ax, column='region', legend=True, markersize=5, cmap='viridis', legend_kwds={'loc': 'lower left'})\n\n    # Set the title\n    plt.title('What is the distribution of airports by region?', wrap=True)\n\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'region'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'region'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 18, in plot\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/plotting.py\", line 968, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/plotting.py\", line 728, in plot_dataframe\n    values = df[column]\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/geodataframe.py\", line 1415, in __getitem__\n    result = super().__getitem__(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'region'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    data = data.groupby('date')['traffic'].sum().reset_index()\n    \n    plt.plot(data['date'], data['traffic'])\n    plt.xlabel('Date')\n    plt.ylabel('Airport Traffic')\n    plt.title('What is the trend of airport traffic over time?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'date'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'date'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'date'\n"}}]]}