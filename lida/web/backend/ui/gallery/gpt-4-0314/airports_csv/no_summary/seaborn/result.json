{"summary": {"file_name": "airports.csv"}, "goals": [{"index": 0, "question": "What is the distribution of airports by country?", "visualization": "Bar chart of number of airports by country", "rationale": "This visualization will help us understand which countries have the most and least number of airports. This information can be useful for airlines and airport management companies to identify potential markets and investment opportunities."}, {"index": 1, "question": "What is the distribution of airports by type?", "visualization": "Pie chart of number of airports by type", "rationale": "This visualization will help us understand the proportion of different types of airports such as small, medium, and large airports. This information can be useful for airlines and airport management companies to identify the types of airports they need to focus on for their operations."}, {"index": 2, "question": "What is the busiest airport in terms of passenger traffic?", "visualization": "Bar chart of top 10 airports by passenger traffic", "rationale": "This visualization will help us identify the busiest airports in terms of passenger traffic. This information can be useful for airlines to identify the airports they need to focus on for their operations and for airport management companies to plan for capacity expansion."}, {"index": 3, "question": "What is the distribution of airports by region?", "visualization": "Map of airports by region", "rationale": "This visualization will help us understand the distribution of airports across different regions. This information can be useful for airlines and airport management companies to identify potential markets and investment opportunities."}, {"index": 4, "question": "What is the trend in the number of airports over time?", "visualization": "Line chart of number of airports by year", "rationale": "This visualization will help us understand the trend in the number of airports over time. This information can be useful for airlines and airport management companies to plan for capacity expansion and to identify potential markets and investment opportunities."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    country_counts = data['country'].value_counts()\n    plt.figure(figsize=(15, 6))\n    sns.barplot(x=country_counts.index, y=country_counts.values, palette='viridis')\n    plt.title('What is the distribution of airports by country?', wrap=True)\n    plt.xlabel('Country')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=90)\n    plt.legend(title='Countries', loc='upper right', labels=country_counts.index)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    airport_counts = data['type'].value_counts()\n    plt.pie(airport_counts, labels=airport_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airports by type?', wrap=True)\n    plt.legend(airport_counts.index, loc='upper right')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.sort_values(by='passenger_traffic', ascending=False).head(10)\n    chart = sns.barplot(x='airport_name', y='passenger_traffic', data=data, palette='viridis')\n    plt.title('What is the busiest airport in terms of passenger traffic?', wrap=True)\n    plt.xlabel('Airport Name')\n    plt.ylabel('Passenger Traffic')\n    plt.xticks(rotation=45)\n    plt.legend(title='Top 10 Airports', loc='upper right', labels=data['airport_name'])\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n    gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.longitude, data.latitude))\n    fig, ax = plt.subplots(figsize=(15, 10))\n    world.boundary.plot(ax=ax, linewidth=1)\n    gdf.plot(ax=ax, markersize=5, column='region', legend=True, cmap='viridis', legend_kwds={'loc': 'lower left'})\n    plt.title('What is the distribution of airports by region?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['year'] = data['date'].dt.year\n    yearly_airports = data.groupby('year').size().reset_index(name='number_of_airports')\n\n    plt.figure(figsize=(10, 6))\n    sns.lineplot(x='year', y='number_of_airports', data=yearly_airports)\n    plt.title('What is the trend in the number of airports over time?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)"]], "filename": "airports.csv", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    country_counts = data['country'].value_counts()\n    plt.figure(figsize=(15, 6))\n    sns.barplot(x=country_counts.index, y=country_counts.values, palette='viridis')\n    plt.title('What is the distribution of airports by country?', wrap=True)\n    plt.xlabel('Country')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=90)\n    plt.legend(title='Countries', loc='upper right', labels=country_counts.index)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    airport_counts = data['type'].value_counts()\n    plt.pie(airport_counts, labels=airport_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airports by type?', wrap=True)\n    plt.legend(airport_counts.index, loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'type'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'type'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.sort_values(by='passenger_traffic', ascending=False).head(10)\n    chart = sns.barplot(x='airport_name', y='passenger_traffic', data=data, palette='viridis')\n    plt.title('What is the busiest airport in terms of passenger traffic?', wrap=True)\n    plt.xlabel('Airport Name')\n    plt.ylabel('Passenger Traffic')\n    plt.xticks(rotation=45)\n    plt.legend(title='Top 10 Airports', loc='upper right', labels=data['airport_name'])\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'passenger_traffic'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 6319, in sort_values\n    k = self._get_label_or_level_values(by, axis=axis)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/generic.py\", line 1840, in _get_label_or_level_values\n    raise KeyError(key)\nKeyError: 'passenger_traffic'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n    gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.longitude, data.latitude))\n    fig, ax = plt.subplots(figsize=(15, 10))\n    world.boundary.plot(ax=ax, linewidth=1)\n    gdf.plot(ax=ax, markersize=5, column='region', legend=True, cmap='viridis', legend_kwds={'loc': 'lower left'})\n    plt.title('What is the distribution of airports by region?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'region'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'region'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in plot\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/plotting.py\", line 968, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/plotting.py\", line 728, in plot_dataframe\n    values = df[column]\n  File \"/home/victordibia/miniconda3/lib/python3.9/site-packages/geopandas/geodataframe.py\", line 1415, in __getitem__\n    result = super().__getitem__(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'region'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['year'] = data['date'].dt.year\n    yearly_airports = data.groupby('year').size().reset_index(name='number_of_airports')\n\n    plt.figure(figsize=(10, 6))\n    sns.lineplot(x='year', y='number_of_airports', data=yearly_airports)\n    plt.title('What is the trend in the number of airports over time?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'date'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'date'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'date'\n"}}]]}